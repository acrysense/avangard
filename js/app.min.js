"use strict";

document.addEventListener('DOMContentLoaded', function () {
  // checker
  var useItemChecker = function useItemChecker(els, onClickOutside) {
    var checkBodyClick = function checkBodyClick(e) {
      var currentEl = e.target;
      while (currentEl) {
        if (els.includes(currentEl)) break;
        currentEl = currentEl.parentNode;
      }
      if (!currentEl) {
        onClickOutside();
        removeBodyChecker();
      }
    };
    function setBodyChecker() {
      document.documentElement.addEventListener('click', checkBodyClick);
    }
    function removeBodyChecker() {
      document.documentElement.removeEventListener('click', checkBodyClick);
    }
    return {
      setBodyChecker: setBodyChecker,
      removeBodyChecker: removeBodyChecker
    };
  };

  // inputmask
  Inputmask().mask(document.querySelectorAll('input'));

  // textarea
  var allTexareas = document.querySelectorAll('textarea');
  if (allTexareas) {
    allTexareas.forEach(function (el) {
      el.style.height = el.setAttribute('style', 'height: ' + el.scrollHeight + 'px');
      el.classList.add('auto');
      el.addEventListener('input', function (e) {
        el.style.height = 'auto';
        el.style.height = el.scrollHeight + 'px';
      });
    });
  }

  // mobile menu
  var mobileMenu = document.getElementById('menu');
  var mobileMenuTrigger = document.getElementById('hamburger-toggle');
  var header = document.getElementById('header');
  if (header && mobileMenu && mobileMenuTrigger) {
    mobileMenuTrigger.addEventListener('click', function (event) {
      event.preventDefault();
      if (mobileMenu.classList.contains('is--active')) {
        header.classList.remove('is--menu');
        mobileMenuTrigger.classList.remove('is--active');
        mobileMenu.classList.remove('is--active');
        document.body.classList.remove('scroll-disabled');
      } else {
        header.classList.add('is--menu');
        mobileMenuTrigger.classList.add('is--active');
        mobileMenu.classList.add('is--active');
        document.body.classList.add('scroll-disabled');
      }
    });
  }

  // counter
  var counters = document.querySelectorAll('.about__value');
  var speed = 250;
  if (counters) {
    var formatNumber = function formatNumber(number) {
      return number.toLocaleString('ru-RU').replace(/,/g, ' ') + '+';
    };
    var animateCounter = function animateCounter(counter) {
      var target = +counter.getAttribute('data-target');
      var increment = target / speed;
      var updateCounter = function updateCounter() {
        var current = +counter.innerText.replace(/\s/g, '').replace('+', '');
        if (current < target) {
          counter.innerText = formatNumber(Math.ceil(current + increment));
          requestAnimationFrame(updateCounter);
        } else {
          counter.innerText = formatNumber(target);
        }
      };
      updateCounter();
    };
    var options = {
      threshold: 0.5
    };
    var observer = new IntersectionObserver(function (entries, observer) {
      entries.forEach(function (entry) {
        if (entry.isIntersecting) {
          animateCounter(entry.target);
          observer.unobserve(entry.target);
        }
      });
    }, options);
    counters.forEach(function (counter) {
      observer.observe(counter);
    });
  }

  // main slider
  var mainSlider = document.querySelector('.main__slider .swiper');
  if (mainSlider) {
    var myMainSlider = new Swiper(mainSlider, {
      slidesPerView: 1,
      loop: true,
      pagination: {
        el: '.main__slider .swiper-pagination',
        type: 'bullets',
        clickable: true
      }
    });
  }

  // projects slider
  var projectsSlider = document.querySelector('.projects__slider .swiper');
  if (projectsSlider) {
    var myProjectsSlider = new Swiper(projectsSlider, {
      slidesPerView: 'auto',
      spaceBetween: 30,
      loop: true,
      navigation: {
        prevEl: '.projects__slider .swiper-button-prev',
        nextEl: '.projects__slider .swiper-button-next'
      },
      breakpoints: {
        0: {
          slidesPerView: 1,
          spaceBetween: 20
        },
        1200: {
          slidesPerView: 'auto',
          spaceBetween: 30
        }
      }
    });
  }

  // articles slider
  var articlesSlider = document.querySelector('.articles__slider .swiper');
  if (articlesSlider) {
    var myArticlesSlider = new Swiper(articlesSlider, {
      slidesPerView: 'auto',
      spaceBetween: 30,
      loop: true,
      navigation: {
        prevEl: '.articles__slider .swiper-button-prev',
        nextEl: '.articles__slider .swiper-button-next'
      },
      breakpoints: {
        0: {
          spaceBetween: 20
        },
        1200: {
          spaceBetween: 30
        }
      },
      on: {
        slideChange: function slideChange() {
          var activeSlide = myArticlesSlider.slides[myArticlesSlider.realIndex];
          var swiperWrapper = articlesSlider.closest('.articles__slider').querySelector('.swiper-wrapper');

          // swiperWrapper.style.transform = `translateX(180px)`;

          // Получаем размеры и позиции слайдов и контейнера
          var slideRect = activeSlide.getBoundingClientRect();
          var containerRect = articlesSlider.getBoundingClientRect();

          // Проверяем, выходит ли активный слайд за границы контейнера
          console.log(slideRect.left);
          console.log(containerRect.left);
          console.log(slideRect.left < containerRect.left || slideRect.right > containerRect.right);
          // if (slideRect.left < containerRect.left || slideRect.right > containerRect.right) {
          //     // Вычисляем смещение для перемещения активного слайда в видимую область
          //     const offset = containerRect.left - slideRect.left + (containerRect.width - slideRect.width) / 2;

          //     // Применяем translateX к wrapper для корректировки позиции слайдов
          //     swiperWrapper.style.transform = `translateX(${offset}px)`;
          // }
        },

        resize: function resize() {
          myArticlesSlider.update();
        }
      }
    });
  }
});